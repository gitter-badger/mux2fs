buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"
		classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.+"
	}
}
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: "net.ltgt.apt"
apply plugin: "jacoco"
apply plugin: "com.github.kt3k.coveralls"

dependencies {
	compile group: 'com.github.serceman', name: 'jnr-fuse', version: '+'
	compile group: 'joda-time', name: 'joda-time', version: '2.9+'
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7+'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '+'
	compile group: 'ch.qos.logback', name: 'logback-core', version: '+'
	compile group: 'com.google.guava', name: 'guava', version: '21.+'
	compile group: 'com.beust', name: 'jcommander', version: '1.60'
	compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.0'
	compile group: 'com.aol.simplereact', name: 'cyclops-react', version: '2.0.+'

	testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.+'
	testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile group: 'org.assertj', name: 'assertj-core', version: '3.+'
	testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.+'
	testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.7.+'
	testCompile group: 'org.powermock', name: 'powermock-core', version: '1.7.+'
	testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.+'
	testCompile group: 'com.google.auto.value', name: 'auto-value', version: '1.+'
	apt group: 'com.google.auto.value', name: 'auto-value', version: '1.+'
}

sourceSets { shell }

sourceSets {
	shell {
		resources { srcDirs = ['src/main/shell'] }
	}
}

task copyInstallationTree(dependsOn: [assemble]) {
	inputs.files configurations.runtime
	inputs.files jar
	inputs.files sourceSets.shell.resources
	outputs.dir "$buildDir/output/install"
	doLast {
		copy {
			from configurations.runtime
			from jar
			into "$buildDir/output/install/usr/lib/mux2fs/lib"
		}
		copy {
			from sourceSets.shell.resources
			into "$buildDir/output/install/usr/bin"
		}
	}
}

task deploy(type: Exec, dependsOn: [copyInstallationTree]) {
	commandLine "sudo", "rsync", "-Kr", "$buildDir/output/install/", "/"
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: '**/se/tfiskgul/mux2fs/fs/jnrfuse/**')
		})
	}
}

// Attribution to Daniel Atalla on Gradle Forums for this offline Jacoco task:
// https://discuss.gradle.org/t/jacoco-offline-instrumentation-in-gradle/9996/2
project.ext.jacocoOfflineSourceSets = [ 'main' ]
task doJacocoOfflineInstrumentation(dependsOn: [ classes, project.configurations.jacocoAnt ]) {
	inputs.files classes.outputs.files
	File outputDir = new File(project.buildDir, 'instrumentedClasses')
	outputs.dir outputDir
	doFirst {
		project.delete(outputDir)
		ant.taskdef(
			resource: 'org/jacoco/ant/antlib.xml',
			classpath: project.configurations.jacocoAnt.asPath,
			uri: 'jacoco'
		)
		def instrumented = false
		jacocoOfflineSourceSets.each { sourceSetName ->
			if (file(sourceSets[sourceSetName].output.classesDir).exists()) {
				def instrumentedClassedDir = "${outputDir}/${sourceSetName}"
				ant.'jacoco:instrument'(destdir: instrumentedClassedDir) {
					fileset(dir: sourceSets[sourceSetName].output.classesDir, includes: '**/*.class')
				}
				// Replace the classes dir in the test classpath with the instrumented one
				sourceSets.test.runtimeClasspath -= files(sourceSets[sourceSetName].output.classesDir)
				sourceSets.test.runtimeClasspath += files(instrumentedClassedDir)
				instrumented = true
			}
		}
		if (instrumented) {
			// Disable class verification based on https://github.com/jayway/powermock/issues/375
			test.jvmArgs += '-noverify'
		}
	}
}

test.dependsOn doJacocoOfflineInstrumentation
